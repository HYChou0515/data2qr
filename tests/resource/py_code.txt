#!/usr/bin/env python
import numpy as np
import sys
import bz2
import qrcode
from PIL import Image
from pyzbar import pyzbar
import cv2 as cv
import math
np.set_printoptions(threshold=sys.maxsize)

"""
This program effectively encodes and transforms data to QR code.

Encoding work flow:
    ascii string --to-byte-array-->--bz2-compress--> byte array (bit256 array)
    --to-int--> large int --re-partition-by-45--> bit45 array --using-D--> encoded array
    --get-chunks-if-to-large--> QR Codes

Decoding work flow: assume imcoming is one long string in char set D
    long string --using-D--> large int --to-binary--> bits
    --padding--> bits with length be a multiple of 8 --8-bits-a-chunk--> byte array
    --bz2-decompress--> decoded byte array --decode-ascii--> ascii string
"""

ENCODE_METHOD = 'ascii'
D = []
D.extend([chr(ord('0')+i) for i in range(10)])
D.extend([chr(ord('A')+i) for i in range(26)])
D.extend([' ', '$', '%', '*', '+', '-', '.', '/', ':'])

def get_image_name_format(nr_imgs):
    return '%%0%dd.png' % (int(math.floor(math.log10(nr_imgs)))+1)

def data2code(s):
    byte_array=bz2.compress(s.encode(ENCODE_METHOD))
    bits = ''.join(map(lambda bt: bin(bt)[2:].zfill(8), byte_array))
    bignum = int(bits, 2)
    bit45_array = []
